// src/controller/report.controller.js

const { Report, UserViolation } = require('../../model');
const ActivityLog = require('../../model/ActivityLog.model'); // Th√™m d√≤ng n√†y ƒë·ªÉ import ActivityLog
const { validationResult, body } = require('express-validator');
const { detectSpamContent } = require('../../utils/contentFilter');
const { clerkClient } = require('@clerk/clerk-sdk-node');

// H√†m validation cho vi·ªác t·∫°o b√°o c√°o
const validateReportInput = [
    body('title')
        .notEmpty().withMessage('Ti√™u ƒë·ªÅ b√°o c√°o l√† b·∫Øt bu·ªôc.')
        .isLength({ max: 100 }).withMessage('Ti√™u ƒë·ªÅ kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 100 k√Ω t·ª±.'),
    body('description')
        .notEmpty().withMessage('M√¥ t·∫£ b√°o c√°o l√† b·∫Øt bu·ªôc.')
        .isLength({ max: 1000 }).withMessage('M√¥ t·∫£ kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 1000 k√Ω t·ª±.'),
    body('userId')
        .notEmpty().withMessage('ID ng∆∞·ªùi d√πng g·ª≠i b√°o c√°o l√† b·∫Øt bu·ªôc.'),
    body('reportType')
        .isIn(['item_feedback', 'user_behavior', 'spam']).withMessage('Lo·∫°i b√°o c√°o kh√¥ng h·ª£p l·ªá.'),

    body('itemId')
        .optional()
        .custom((value, { req }) => {
            if (req.body.reportType === 'item_feedback' && !value) {
                throw new Error('ID s·∫£n ph·∫©m l√† b·∫Øt bu·ªôc cho lo·∫°i b√°o c√°o "ph·∫£n h·ªìi s·∫£n ph·∫©m".');
            }
            if (value && !value.match(/^[0-9a-fA-F]{24}$/)) {
                throw new Error('ID s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá.');
            }
            return true;
        }),

    body('rating')
        .optional()
        .custom((value, { req }) => {
            if (req.body.reportType === 'item_feedback' && (value === undefined || value === null)) {
                throw new Error('ƒê√°nh gi√° s·ªë sao l√† b·∫Øt bu·ªôc.');
            }
            if (value !== undefined && (value < 1 || value > 5)) {
                throw new Error('ƒê√°nh gi√° s·ªë sao ph·∫£i t·ª´ 1 ƒë·∫øn 5.');
            }
            return true;
        }),

    body('reportedUserEmail')
        .optional()
        .custom(async (value, { req }) => { // TH√äM async v√¨ c·∫ßn await clerkClient
            if ((req.body.reportType === 'user_behavior' || req.body.reportType === 'spam') && !value) {
                throw new Error('Email ng∆∞·ªùi d√πng b·ªã b√°o c√°o l√† b·∫Øt bu·ªôc.');
            }
            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            if (value && !emailRegex.test(value)) {
                throw new Error('ƒê·ªãa ch·ªâ email kh√¥ng h·ª£p l·ªá.');
            }

            // L·∫•y ID c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i t·ª´ req.body.userId (ng∆∞·ªùi g·ª≠i b√°o c√°o)
            const currentUserId = req.body.userId;
            if (!currentUserId) {
                throw new Error('Kh√¥ng t√¨m th·∫•y ID ng∆∞·ªùi d√πng g·ª≠i b√°o c√°o.');
            }
            
            // T√¨m ki·∫øm ng∆∞·ªùi d√πng b·∫±ng email b·ªã b√°o c√°o
            if (value) {
                const users = await clerkClient.users.getUserList({ emailAddress: [value] });
                if (users && users.length > 0) {
                    const reportedUserId = users[0].id;
                    // So s√°nh ID c·ªßa ng∆∞·ªùi g·ª≠i b√°o c√°o v·ªõi ID c·ªßa ng∆∞·ªùi b·ªã b√°o c√°o
                    if (currentUserId === reportedUserId) {
                        throw new Error('B·∫°n kh√¥ng th·ªÉ b√°o c√°o ch√≠nh m√¨nh.');
                    }
                }
            }
            return true;
        }),
];


// Controller ch√≠nh
const createReport = async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
        return res.status(400).json({ success: false, errors: errors.array() });
    }

    try {
        const { title, description, userId, reportType, itemId, rating, reportedUserEmail } = req.body;

        // Content Filtering
        const isSpamDetected = await detectSpamContent(`${title} ${description}`);
        if (isSpamDetected) {
            const userViolationDoc = await UserViolation.create({ // Ghi l·∫°i UserViolation
                userId,
                violationType: 'content_spam', // ƒê·∫£m b·∫£o gi√° tr·ªã n√†y h·ª£p l·ªá
                description: `N·ªôi dung b√°o c√°o c√≥ th·ªÉ ch·ª©a spam ho·∫∑c n·ªôi dung kh√¥ng ph√π h·ª£p: "${title}" - "${description}"`,
                payload: { // S·ª≠ d·ª•ng 'payload' thay v√¨ 'details' ƒë·ªÉ nh·∫•t qu√°n v·ªõi schema UserViolation
                    reportTitle: title,
                    reportDescription: description,
                    reportType,
                    reason: 'Content filtering flagged report as spam/inappropriate.',
                    ipAddress: req.ip,
                    userAgent: req.headers['user-agent'],
                }
            });

            // Ghi log ho·∫°t ƒë·ªông khi ph√°t hi·ªán spam v√† t·∫°o UserViolation
            await ActivityLog.create({
                userId: userId, // Ng∆∞·ªùi d√πng c√≥ h√†nh vi spam
                actionType: 'USER_VIOLATION_CREATED',
                description: `T·ª± ƒë·ªông t·∫°o b·∫£n ghi vi ph·∫°m cho ng∆∞·ªùi d√πng ${userId} do n·ªôi dung b√°o c√°o b·ªã g·∫Øn c·ªù spam.`,
                entityType: 'UserViolation',
                entityId: userViolationDoc._id, // Li√™n k·∫øt v·ªõi b·∫£n ghi UserViolation v·ª´a t·∫°o
                ipAddress: req.ip,
                userAgent: req.headers['user-agent'],
                payload: {
                    violationId: userViolationDoc._id,
                    violationType: userViolationDoc.violationType,
                    flaggedReportTitle: title,
                    flaggedReportDescription: description,
                }
            });

            return res.status(400).json({
                success: false,
                message: 'N·ªôi dung b√°o c√°o b·ªã t·ª´ ch·ªëi do c√≥ th·ªÉ ch·ª©a spam ho·∫∑c n·ªôi dung kh√¥ng ph√π h·ª£p.',
                violationDetected: true
            });
        }

        // üîç N·∫øu l√† b√°o c√°o ng∆∞·ªùi d√πng ‚Üí Tra email sang Clerk ID
        let resolvedReportedUserId = undefined;
        if ((reportType === 'user_behavior' || reportType === 'spam') && reportedUserEmail) {
            const users = await clerkClient.users.getUserList({ emailAddress: [reportedUserEmail] });

            if (!users || users.length === 0) {
                return res.status(404).json({ success: false, message: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi email n√†y.' });
            }

            resolvedReportedUserId = users[0].id;
            
            // TH√äM LOGIC KI·ªÇM TRA NG∆Ø·ªúI D√ôNG T·ª∞ B√ÅO C√ÅO M√åNH ·ªû BACKEND
            if (userId === resolvedReportedUserId) {
                return res.status(400).json({ success: false, message: 'B·∫°n kh√¥ng th·ªÉ b√°o c√°o ch√≠nh m√¨nh.' });
            }
        }

        // T·∫°o b√°o c√°o m·ªõi
        const newReport = new Report({
            title,
            description,
            userId,
            reportType,
            itemId: reportType === 'item_feedback' ? itemId : undefined,
            rating: reportType === 'item_feedback' ? rating : undefined,
            reportedUserId: resolvedReportedUserId,
            status: 'pending',
        });

        await newReport.save();

        // Ghi log ho·∫°t ƒë·ªông khi t·∫°o b√°o c√°o th√†nh c√¥ng
        await ActivityLog.create({
            userId: userId, // Ng∆∞·ªùi d√πng g·ª≠i b√°o c√°o
            actionType: 'USER_REPORTED', // Ho·∫∑c 'REPORT_CREATED' n·∫øu b·∫°n mu·ªën m·ªôt actionType c·ª• th·ªÉ h∆°n
            description: `Ng∆∞·ªùi d√πng ${userId} ƒë√£ g·ª≠i m·ªôt b√°o c√°o (${reportType}) v·ªõi ti√™u ƒë·ªÅ: "${title}".`,
            entityType: 'Report',
            entityId: newReport._id, // Li√™n k·∫øt v·ªõi b·∫£n ghi b√°o c√°o v·ª´a t·∫°o
            ipAddress: req.ip,
            userAgent: req.headers['user-agent'],
            payload: {
                reportId: newReport._id,
                reportType: newReport.reportType,
                reportedUserId: newReport.reportedUserId,
                itemId: newReport.itemId,
            },
        });


        res.status(201).json({
            success: true,
            message: 'B√°o c√°o c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng v√† ƒëang ch·ªù x√©t duy·ªát.',
            report: newReport
        });

    } catch (error) {
        console.error('L·ªói khi t·∫°o b√°o c√°o:', error);
        if (error.name === 'ValidationError') {
            const messages = Object.values(error.errors).map(val => val.message);
            return res.status(400).json({ success: false, message: messages.join(', ') });
        }
        res.status(500).json({ success: false, message: 'ƒê√£ x·∫£y ra l·ªói m√°y ch·ªß khi g·ª≠i b√°o c√°o.' });
    }
};

module.exports = {
    createReport,
    validateReportInput
};